from traits.api import HasTraits, Property, cached_property, \
    Array, Int, \
    Str, Float, Dict, WeakRef

import bmcs_shell.folding.analysis.abaqus.abaqus_shell_manager as asm
import numpy as np

from bmcs_shell.folding.analysis.fem.vmats_shell_elastic import MATSShellElastic
from bmcs_shell.folding.analysis.wb_shell_analysis import WBShellAnalysis


class AbaqusLink(HasTraits):
    # data source
    shell_analysis = WeakRef

    nodes = Property

    def _get_nodes(self):
        # return np.array([[0, 0, 0], [1, 0, 0], [0, 1, 0]])
        return self.shell_analysis.geo.X_Ia

    facets = Property

    def _get_facets(self):
        # return np.array([[0, 1, 2]])
        return self.shell_analysis.geo.I_Fi

    bc_fixed = Property
    def _get_bc_fixed(self):
        return self.shell_analysis.bcs.bc_fixed_array

    bc_loaded = Property
    def _get_bc_loaded(self):
        return self.shell_analysis.bcs.bc_loaded_array
    # -------------------------------------------------------------------------
    # Data for model building
    # -------------------------------------------------------------------------
    element_type = Str('S3R')
    model_name = Str('Model-1')
    material_name = Str('concrete')
    materials = Dict({"concrete": [3.0e10, 0.2, 2500],  # [Young's modulus in N/m3, poissions ratio, density in kg/m3]
                      "steel": [21.0e10, 0.3, 7880]})
    thickness = Float(0.06)  # Thickness in meter
    # bounded_nodes = Array(np.int, value=[1, 2, 3, 13, 14, 15])
    bounded_nodes = Array(np.int, value=[0, 2])

    _inp_head = Property(Str, depends_on='model_name')

    @cached_property
    def _get__inp_head(self):
        """
        Head of the input file.
        """

        head = "*Heading\n\
** Job name: Job-1 Model name: " + self.model_name + "\n\
** Generated by: AbaqusLink\n\
*Preprint, echo=NO, model=Yes, history=NO, contact=NO\n\
**\n\
** Model definition\n\
**\n"
        return head

    _inp_nodes = Property(Str, depends_on='nodes')

    @cached_property
    def _get__inp_nodes(self):
        """
        Nodelist of the input file.
        """
        n = self.nodes
        nodes = "*Node,\t nset=node-1\n"
        for i in range(len(n)):
            temp_node = ' %i,\t %.4f,\t %.4f,\t %.4f\n' % (
                i + 1, n[i][0], n[i][1], n[i][2])
            nodes += temp_node
        return nodes

    _inp_elements = Property(Str, depends_on='facets, element_type')

    @cached_property
    def _get__inp_elements(self):
        """
        Elementlist of the input file.
        """
        f = self.facets
        facets = "*Element,\t elset=STRUC,\t type=" + self.element_type + "\n"
        for i in range(len(f)):
            temp_facet = ' %i,\t %i,\t %i,\t %i\t \n' % (
                i + 1, f[i][0] + 1, f[i][1] + 1, f[i][2] + 1)
            facets += temp_facet
        return facets

    _inp_sets = Property(Str, depends_on='nodes, facets, bounded_nodes')

    @cached_property
    def _get__inp_sets(self):
        """
        Sets of the input file.
        """
        set_str = '*Nset, nset=nodes, instance=Part-A, generate\n 1,\t %i,\t 1\n\
*Elset, elset=Struc, instance=Part-A, generate\n 1,\t %i,\t 1\n\
*Elset, elset=_Surf-1_SNEG,  internal, instance=Part-A, generate\n 1,\t %i,\t 1\n' % (
            len(self.nodes), len(self.facets), len(self.facets))
        set_str += '*Nset, nset=boundery, instance=Part-A\n'
        for i in self.bounded_nodes:
            print(i)
            set_str += '%i, ' % (i)
        set_str += '\n'
        return set_str

    _inp_section = Property(Str, depends_on='thickness, material_name')

    @cached_property
    def _get__inp_section(self):
        """
        Sections of the input file.
        """
        section = "** Section: Section-1\n\
*Shell Section, elset=Struc, material="
        section += self.material_name + '\n'
        section += '%f \n' % (self.thickness)
        return section

    _inp_part = Property(
        Str, depends_on='_inp_nodes, _inp_elements, _inp_section')

    @cached_property
    def _get__inp_part(self):
        """
        Parts of the input file.
        """
        part = '*Part, NAME=Part-1\n'
        part += self._inp_nodes
        part += self._inp_elements
        part += self._inp_section
        part += '*End Part\n'
        return part

    _inp_instance = Property(Str)

    @cached_property
    def _get__inp_instance(self):
        """
        Instance of the input file.
        """
        instance = '*Instance, NAME=PART-A, PART=Part-1\n\
*End Instance\n'
        return instance

    _inp_surface = Property(Str)

    @cached_property
    def _get__inp_surface(self):
        """
        Surfaces of the input file.
        """
        surf = '*Surface, type=ELEMENT, name=Surf-1\n\
_Surf-1_SNEG, SNEG\n'
        return surf

    _inp_material = Property(Str, depends_on='material_name')

    @cached_property
    def _get__inp_material(self):
        """
        Materials of the input file.
        """
        material = '**\n\
** MATERIALS\n\
** \n\
*Material, name='
        material += self.material_name + '\n'
        material += '*Elastic\n'
        mat_values = self.materials[self.material_name]
        material += '%f,\t %f \n' % (mat_values[0], mat_values[1])
        material += '**\n *DENSITY\n %f\n' % (mat_values[2])
        material += '** ----------------------------------------------------------------\n'
        return material

    _inp_assembly = Property(Str, depends_on='nodes, facets')

    @cached_property
    def _get__inp_assembly(self):
        """
        Assembly of the input file.
        """
        assembly = '*Assembly, NAME = Assembly1\n'
        assembly += self._inp_instance
        assembly += self._inp_sets
        assembly += self._inp_surface
        assembly += '*End Assembly\n'
        return assembly

    _inp_boundary_conditions = Property(Str)

    @cached_property
    def _get__inp_boundary_conditions(self):
        bcs_header = '** BOUNDARY CONDITIONS\n** \n'
        bcs_footer = '** \n'

        bc_txt = ''
        for i, node_bc in enumerate(self.bc_fixed):
            bc_txt += '** Name: BC-' + str(i + 1) + ' Type: Displacement/Rotation\n\
*Boundary\n'
            for bc_idx, bc_value in enumerate(node_bc[1:]):
                if np.isnan(bc_value):
                    continue
                node_idx = int(node_bc[0])
                bc_txt += str(node_idx + 1) + ', ' + (str(bc_idx + 1) + ', ' + str(bc_idx + 1) + ', ' + str(bc_value)) + '\n'

        return bcs_header + bc_txt + bcs_footer
#         bcs = '** BOUNDARY CONDITIONS\n\
# ** \n\
# ** Name: BC-1 Type: Displacement/Rotation\n\
# *Boundary\n\
# Set-4, 1, 1, 5.\n\
# ** Name: BC-2 Type: Displacement/Rotation\n\
# *Boundary\n\
# Set-5, 1, 1\n\
# **'

    _inp_loadcases = Property(Str)

    @cached_property
    def _get__inp_loadcases(self):
        """
        Loadcases of the input file.
        """
        load = '**\n\
** STEP: Step-1\n\
** \n\
*Step, name=Step-1\n\
*Static\n\
0.1, 1., 1e-05, 0.1\n\
**\n\
** \n' + self._inp_boundary_conditions + '** LOADS\n\
** \n\
** Name: Load-1   Type: Pressure\n\
*DLOAD\n\
Struc, GRAV, 9.81, 0.0, 0.0, -1.0\n'
        return load

    _inp_output = Property(Str)

    @cached_property
    def _get__inp_output(self):
        """
        Output of the input file.
        """
        out = '**\n\
** OUTPUT REQUESTS\n\
** \n\
*Restart, write, frequency=0\n\
** \n\
** FIELD OUTPUT: F-Output-1\n\
** \n\
*Output, field\n\
#*Node Output\n\
#CF, RF, U\n\
#*Element Output\n\
#ALPHA, ALPHAN, CS11, CTSHR, MISES, MISESMAX, MISESONLY, PRESSONLY, PS, S, SF, SM, SSAVG, TRIAX, TSHR, VS\n\
*Output, field, frequency=0\n\
**\n\
** HISTORY OUTPUT: H-Output-1\n\
** \n\
*Output, history, variable=PRESELECT\n\
*NODE PRINT\n\
U,\n\
RF,\n\
*EL PRINT\n\
S,\n\
*End Step'
        return out

    def build_inp(self):
        # Data head
        head = self._inp_head
        # part
        part = self._inp_part
        # Assembly
        assembly = self._inp_assembly
        # Material
        material = self._inp_material
        # Data bottom
        loadcases = self._inp_loadcases
        output = self._inp_output

        fname = self.model_name + '.inp'
        inp_file = open(fname, 'w')
        inp_file.write(head)
        inp_file.write(part)
        inp_file.write(assembly)
        inp_file.write(material)
        inp_file.write(loadcases)
        inp_file.write(output)

        inp_file.close()
        print('inp file %s written' % fname)

    # =======================================================================
    # Solving of the problem in Abaqus
    # =======================================================================

    tail = '\n'

    def abaqus_solve(self):
        p = asm.open_shell()
        asm.solve_abaqus(p, self.model_name, self.tail)
        # results file is 'dat'
        # asm.download_file(
        #     p, self.login, self.model_name + '.dat', self.tail, self.model_name + '.dat')
        p.kill()

    def abaqus_cae(self):
        pass
        # asm.open_abaqus(p, self.tail)


if __name__ == '__main__':

    tmodel = MATSShellElastic(E=28000, nu=0.2)
    n_phi_plus = 2
    n_x_plus = 1
    wba = WBShellAnalysis(h=10, tmodel=tmodel)
    data = dict(alpha=1.24, a=500, a_high=3000, b=900, b_high=3000, c=400, c_high=2000,
                n_phi_plus=n_phi_plus, n_x_plus=n_x_plus, show_nodes=False)
    wba.geo.trait_set(**data)


    al = AbaqusLink(shell_analysis=wba, n_split=10)
    al.model_name = 'test_name'
    al.build_inp()
    # al.abaqus_solve()
    # al.abaqus_cae()

    # import subprocess
    #
    # # cmd = ['/run/myscript', '--arg', 'value']
    # cmd = ['abaqus cae', '--arg', 'value']
    # process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    # process.wait()
    # print(process.returncode)
    #
    # # p = asm.open_shell()
    # # asm.open_abaqus(p, '\n')
